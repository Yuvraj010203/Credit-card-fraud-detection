[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fraud-detection-system"
version = "1.0.0"
description = "Real-time credit card fraud detection system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Fraud Detection Team", email = "team@frauddetection.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "lightgbm>=4.1.0",
    "redis>=5.0.0",
    "kafka-python>=2.0.0",
    "neo4j>=5.15.0",
    "minio>=7.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]
ml = [
    "tensorflow>=2.15.0",
    "torch>=2.1.0",
    "networkx>=3.2.0",
    "node2vec>=0.4.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
]

[project.urls]
Homepage = "https://github.com/company/fraud-detection-system"
Documentation = "https://fraud-detection-docs.readthedocs.io/"
Repository = "https://github.com/company/fraud-detection-system"
Issues = "https://github.com/company/fraud-detection-system/issues"

[project.scripts]
fraud-api = "services.api.app.main:main"
fraud-trainer = "services.trainer.app.main:main"
fraud-simulator = "services.simulator.app.main:main"

[tool.setuptools.packages.find]
include = ["services*", "shared*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["services", "shared"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "services/api/tests",
    "services/inference/tests",
    "services/enricher/tests",
    "services/trainer/tests",
    "services/graph-builder/tests",
    "services/simulator/tests",
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["services", "shared"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "kafka.*",
    "neo4j.*",
    "minio.*",
    "lightgbm.*",
    "networkx.*",
    "node2vec.*",
]
ignore_missing_imports = true
