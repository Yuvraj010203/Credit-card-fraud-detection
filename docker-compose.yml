version: "3.9"

services:
  # Message Broker
  kafka:
    image: bitnami/kafka:latest
    container_name: fraud-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LOG_RETENTION_HOURS: 24
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Primary Database
  postgres:
    image: postgres:16
    container_name: fraud-postgres
    environment:
      POSTGRES_USER: fraud
      POSTGRES_PASSWORD: fraud_password_2024
      POSTGRES_DB: frauddb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraud -d frauddb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Feature Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: fraud-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Graph Database
  neo4j:
    image: neo4j:5
    container_name: fraud-neo4j
    environment:
      NEO4J_AUTH: neo4j/graph_password_2024
      NEO4J_PLUGINS: '["graph-data-science", "apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "gds.*,apoc.*"
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test:
        ["CMD-SHELL", "cypher-shell -u neo4j -p graph_password_2024 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Object Storage for ML Models
  minio:
    image: minio/minio:latest
    container_name: fraud-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio_password_2024
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Database for Embeddings
  qdrant:
    image: qdrant/qdrant:latest
    container_name: fraud-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main FastAPI Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: fraud-api
    environment:
      - DATABASE_URL=postgresql://fraud:fraud_password_2024@postgres:5432/frauddb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=graph_password_2024
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio_password_2024
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - MODEL_BUCKET=models
      - LOG_LEVEL=INFO
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./data/models:/app/models
    restart: unless-stopped

  # Inference Service
  inference:
    build:
      context: ./services/inference
      dockerfile: Dockerfile
    container_name: fraud-inference
    environment:
      - DATABASE_URL=postgresql://fraud:fraud_password_2024@postgres:5432/frauddb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=graph_password_2024
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio_password_2024
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - MODEL_BUCKET=models
      - CONSUMER_GROUP_ID=inference-service
    depends_on:
      - postgres
      - redis
      - kafka
      - neo4j
      - minio
      - qdrant
    deploy:
      replicas: 2
    restart: unless-stopped

  # Stream Enrichment Service
  enricher:
    build:
      context: ./services/enricher
      dockerfile: Dockerfile
    container_name: fraud-enricher
    environment:
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://fraud:fraud_password_2024@postgres:5432/frauddb
      - CONSUMER_GROUP_ID=enrichment-service
      - GEOIP_DATABASE_PATH=/app/data/GeoLite2-City.mmdb
    depends_on:
      - redis
      - kafka
      - postgres
    volumes:
      - ./data/geoip:/app/data
    restart: unless-stopped

  # Graph Builder Service
  graph-builder:
    build:
      context: ./services/graph-builder
      dockerfile: Dockerfile
    container_name: fraud-graph-builder
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=graph_password_2024
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - CONSUMER_GROUP_ID=graph-builder-service
      - EMBEDDING_DIMENSION=128
    depends_on:
      - neo4j
      - kafka
      - redis
      - qdrant
    restart: unless-stopped

  # ML Training Service
  trainer:
    build:
      context: ./services/trainer
      dockerfile: Dockerfile
    container_name: fraud-trainer
    environment:
      - DATABASE_URL=postgresql://fraud:fraud_password_2024@postgres:5432/frauddb
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=graph_password_2024
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio_password_2024
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - MODEL_BUCKET=models
      - TRAINING_SCHEDULE=0 2 * * * # Daily at 2 AM
    depends_on:
      - postgres
      - neo4j
      - minio
      - qdrant
    volumes:
      - ./data/models:/app/models
      - ./data/training:/app/training_data
    restart: unless-stopped

  # Transaction Simulator
  simulator:
    build:
      context: ./services/simulator
      dockerfile: Dockerfile
    container_name: fraud-simulator
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TRANSACTIONS_PER_SECOND=50
      - FRAUD_RATE=0.02
      - BURST_MODE=false
    depends_on:
      - kafka
    restart: unless-stopped
    profiles:
      - simulation

  # React Dashboard
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: fraud-dashboard
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080/api/v1
      - REACT_APP_WS_URL=ws://localhost:8080/ws
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fraud-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - dashboard
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: fraud-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  kafka_data:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  minio_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: fraud-detection-network
